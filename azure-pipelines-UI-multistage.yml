# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

# pool:
#   name: Default
#   demands:
#    - agent.name -equals LAPTOP-FTOH5V0M

stages:  
  - stage: Build
    jobs:
      - job: 
        pool:
          name: Default
          demands:
            - agent.name -equals LAPTOP-FTOH5V0M
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'    
          - script: |
              npm install
              npm run build
            displayName: 'npm install and build'
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: 'dist/photo-frame'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/drop.zip'
              replaceExistingArchive: true
            displayName: Archive photo frame ui

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.ArtifactStagingDirectory)'  
              Contents: '**/*'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/drop'
            displayName: Copy Files to drop folder
            
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/drop'
              ArtifactName: 'drop'
              # publishLocation: 'Container'
            displayName: Publist Artifcat to $(Build.ArtifactStagingDirectory)/drop

  - stage: Dev
    dependsOn: Build
    condition: succeeded()
    displayName: Deploy to Dev
    jobs:
      - deployment: Deploy
        pool:
          name: Defauly=t
          demands:
            - agent.name -equals LAPTOP-FTOH5V0M
        environment: Photframe-dev-ui
        
        strategy:
          runOnce:
            deploy:                            
              steps:
                - download: current
                  artifact: drop
                  displayName: Download files ${current}
                - task: ExtractFiles@1
                  inputs:
                    archiveFilePatterns: $(Pipeline.Workspace)/drop/*.zip
                    cleanDestinationFolder: true
                    overwriteExistingFiles: false
                    destinationFolder: $(Pipeline.Workspace)/Files
                  displayName: Extract fles to $(Pipeline.Workspace)/Files
                - task: AzureRmWebAppDeployment@4
                  inputs:
                    ConnectionType: 'AzureRM'
                    azureSubscription: 'Pay-As-You-Go (b5501c42-b7da-45d9-aa33-573bfa70f5d2)'
                    appType: 'webApp'
                    WebAppName: 'photoframe'
                    deployToSlotOrASE: true
                    ResourceGroupName: 'photoframe-rg'
                    SlotName: 'production'
                    packageForLinux: $(Pipeline.Workspace)/Files
                  displayName: 'Deploy photoframe to dev'

